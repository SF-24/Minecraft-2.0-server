package net.minecraft.world.gen.layer;

import net.minecraft.world.WorldType;
import net.minecraft.world.biome.BiomeGenBase;
import net.minecraft.world.gen.ChunkProviderSettings;

public class GenLayerBiome extends GenLayer
{
    private BiomeGenBase[] field_151623_c = new BiomeGenBase[] {BiomeGenBase.desert, BiomeGenBase.desert, BiomeGenBase.desert, BiomeGenBase.savanna, BiomeGenBase.savanna, BiomeGenBase.plains};
    private BiomeGenBase[] field_151621_d = new BiomeGenBase[] {BiomeGenBase.forest, BiomeGenBase.roofedForest, BiomeGenBase.extremeHills, BiomeGenBase.plains, BiomeGenBase.birchForest, BiomeGenBase.swampland};
    private BiomeGenBase[] field_151622_e = new BiomeGenBase[] {BiomeGenBase.forest, BiomeGenBase.extremeHills, BiomeGenBase.taiga, BiomeGenBase.plains};
    private BiomeGenBase[] field_151620_f = new BiomeGenBase[] {BiomeGenBase.icePlains, BiomeGenBase.icePlains, BiomeGenBase.icePlains, BiomeGenBase.coldTaiga};
    private final ChunkProviderSettings chunkProviderSettings;

    private BiomeGenBase[] randomBiomeList;
    WorldType worldType;

    public GenLayerBiome(long varLong, GenLayer genLayer, WorldType worldType, String varString)
    {
        super(varLong);
        this.worldType = this.worldType;
        this.parent = genLayer;

        if (worldType == WorldType.DEFAULT_1_1)
        {
            this.field_151623_c = new BiomeGenBase[] {
                    BiomeGenBase.volcanic_wasteland, BiomeGenBase.mesaPlateau, BiomeGenBase.mesa,
                    BiomeGenBase.desert, BiomeGenBase.desert, BiomeGenBase.desert, BiomeGenBase.savanna, BiomeGenBase.savanna, BiomeGenBase.plains,
                    BiomeGenBase.jungle,BiomeGenBase.jungle, BiomeGenBase.tropical_swampland, BiomeGenBase.rainforest,
                    BiomeGenBase.forest, BiomeGenBase.roofedForest, BiomeGenBase.extremeHills, BiomeGenBase.plains, BiomeGenBase.birchForest, BiomeGenBase.swampland, BiomeGenBase.roofedSwamp,
                    BiomeGenBase.forest, BiomeGenBase.autumnalForest, BiomeGenBase.taiga, BiomeGenBase.megaTaiga, BiomeGenBase.coldTaiga, BiomeGenBase.stoneMountains,
                    BiomeGenBase.iceMountains, BiomeGenBase.icePlains, BiomeGenBase.icePlains, BiomeGenBase.icePlains
            };
            this.chunkProviderSettings = null;
        }
        else if (worldType == WorldType.CUSTOMIZED)
        {
            this.chunkProviderSettings = ChunkProviderSettings.Factory.jsonToFactory(varString).func_177864_b();
        }
        else if (worldType == WorldType.RANDOM_BIOMES || worldType == WorldType.DEFAULT)
        {
            this.randomBiomeList = new BiomeGenBase[]
            {
                BiomeGenBase.volcanic_wasteland, BiomeGenBase.mesaPlateau, BiomeGenBase.mesa,
                BiomeGenBase.desert, BiomeGenBase.desert, BiomeGenBase.desert, BiomeGenBase.savanna, BiomeGenBase.savanna, BiomeGenBase.plains,
                BiomeGenBase.jungle,BiomeGenBase.jungle, BiomeGenBase.tropical_swampland, BiomeGenBase.rainforest,
                BiomeGenBase.forest, BiomeGenBase.roofedForest, BiomeGenBase.extremeHills, BiomeGenBase.plains, BiomeGenBase.birchForest, BiomeGenBase.swampland, BiomeGenBase.roofedSwamp,
                BiomeGenBase.forest, BiomeGenBase.autumnalForest, BiomeGenBase.taiga, BiomeGenBase.megaTaiga, BiomeGenBase.coldTaiga, BiomeGenBase.stoneMountains,
                BiomeGenBase.iceMountains, BiomeGenBase.icePlains, BiomeGenBase.icePlains, BiomeGenBase.icePlains
            };
            this.field_151623_c=randomBiomeList;
            chunkProviderSettings = null;
        }
        else
        {
            this.chunkProviderSettings = null;
        }
    }

    /**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
    public int[] getInts(int areaX, int areaY, int areaWidth, int areaHeight)
    {
        //var5
        int[] aint = this.parent.getInts(areaX, areaY, areaWidth, areaHeight);
        //var6
        int[] aint1 = IntCache.getIntCache(areaWidth * areaHeight);

        for (int i = 0; i < areaHeight; ++i)
        {
            for (int j = 0; j < areaWidth; ++j)
            {
                //a -> i = var7
                //     j = var8
                this.initChunkSeed((long)(j + areaX), (long)(i + areaY));
                //var9
                int k = aint[j + i * areaWidth];
                //var10
                int l = (k & 3840) >> 8;
                k = k & -3841;

                if (this.worldType == WorldType.RANDOM_BIOMES || worldType == WorldType.DEFAULT || worldType==null)
                {
                    if (isBiomeOceanic(k))
                    {
                        aint1[j + i * areaWidth] = k;
                    }
                    else if (k == BiomeGenBase.mushroomIsland.biomeID)
                    {
                        aint1[j + i * areaWidth] = k;
                    }
                    else if (k >= 1 && k <= 4)
                    {
                        // a -> getIntCache? or aint1 or this.nextInt
                        aint1[j + i * areaWidth] = (this.randomBiomeList[this.nextInt(this.randomBiomeList.length)]).biomeID;
                    }
                    else
                    {
                        aint1[j + i * areaWidth] = BiomeGenBase.mushroomIsland.biomeID;
                    }
                }

                // if not random biomes
                else if (this.chunkProviderSettings != null && this.chunkProviderSettings.fixedBiome >= 0)
                {
                    aint1[j + i * areaWidth] = this.chunkProviderSettings.fixedBiome;
                }
                else if (isBiomeOceanic(k))
                {
                    aint1[j + i * areaWidth] = k;
                }
                else if (k == BiomeGenBase.mushroomIsland.biomeID)
                {
                    aint1[j + i * areaWidth] = k;
                }
                else if (k == 1)
                {
                    if (l > 0)
                    {
                        if (this.nextInt(3) == 0)
                        {
                            aint1[j + i * areaWidth] = BiomeGenBase.mesaPlateau.biomeID;
                        }
                        else
                        {
                            aint1[j + i * areaWidth] = BiomeGenBase.mesaPlateau_F.biomeID;
                        }
                    }
                    else
                    {
                        aint1[j + i * areaWidth] = this.field_151623_c[this.nextInt(this.field_151623_c.length)].biomeID;
                    }
                }
                else if (k == 2)
                {
                    if (l > 0)
                    {
                        aint1[j + i * areaWidth] = BiomeGenBase.jungle.biomeID;
                    }
                    else
                    {
                        aint1[j + i * areaWidth] = this.field_151621_d[this.nextInt(this.field_151621_d.length)].biomeID;
                    }
                }
                else if (k == 3)
                {
                    if (l > 0)
                    {
                        aint1[j + i * areaWidth] = BiomeGenBase.megaTaiga.biomeID;
                    }
                    else
                    {
                        aint1[j + i * areaWidth] = this.field_151622_e[this.nextInt(this.field_151622_e.length)].biomeID;
                    }
                }
                else if (k == 4)
                {
                    aint1[j + i * areaWidth] = this.field_151620_f[this.nextInt(this.field_151620_f.length)].biomeID;
                }
                else
                {
                    aint1[j + i * areaWidth] = BiomeGenBase.mushroomIsland.biomeID;
                }
            }
        }

        return aint1;
    }
}
